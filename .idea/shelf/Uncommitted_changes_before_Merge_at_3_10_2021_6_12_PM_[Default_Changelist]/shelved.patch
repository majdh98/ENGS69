Index: app/src/main/java/majd_hamdan/com/easyjob/ui/OffersFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package majd_hamdan.com.easyjob.ui;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.RadioButton;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.firebase.geofire.GeoFire;\r\nimport com.firebase.geofire.GeoLocation;\r\nimport com.firebase.geofire.GeoQuery;\r\nimport com.firebase.geofire.GeoQueryEventListener;\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.location.LocationCallback;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationResult;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.maps.android.clustering.Cluster;\r\nimport com.google.maps.android.clustering.ClusterItem;\r\nimport com.google.maps.android.clustering.ClusterManager;\r\nimport com.google.maps.android.clustering.view.DefaultClusterRenderer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport majd_hamdan.com.easyjob.R;\r\n\r\nimport majd_hamdan.com.easyjob.adapters.GeneralJobCardAdapter;\r\nimport majd_hamdan.com.easyjob.authentication.User;\r\nimport majd_hamdan.com.easyjob.helper.PermissionUtils;\r\nimport majd_hamdan.com.easyjob.job.AddJobActivity;\r\nimport majd_hamdan.com.easyjob.job.Job;\r\nimport majd_hamdan.com.easyjob.job.JobDetailsActivity;\r\n\r\nimport static majd_hamdan.com.easyjob.ui.HistoryFragment.AVALIABLE_JOB_KEY;\r\nimport static majd_hamdan.com.easyjob.ui.HistoryFragment.JOB_TAG;\r\n\r\npublic class OffersFragment extends Fragment implements OnMapReadyCallback,\r\n        ClusterManager.OnClusterClickListener<OffersFragment.MapItem>,\r\n        ClusterManager.OnClusterItemClickListener<OffersFragment.MapItem>,\r\n        ClusterManager.OnClusterItemInfoWindowClickListener<OffersFragment.MapItem> {\r\n\r\n    public static final int LOCATION_PERMISSION_REQUEST_CODE = 1;\r\n    //Map and location variables\r\n    private GoogleMap map;\r\n    private FusedLocationProviderClient fusedLocationClient;\r\n    private LocationRequest locationRequest;\r\n    private LocationCallback locationCallback;\r\n    private DatabaseReference geofire_db;\r\n    private GeoFire geoFire;\r\n    private Location initial_location;\r\n    private ClusterManager<MapItem> clusterManager;\r\n\r\n\r\n    private RecyclerView view;\r\n    private TextView welcomeMessage;\r\n    private Button viewJobButtons;\r\n    private Button addJob;\r\n    private List<Job> jobs;\r\n\r\n    private RadioButton mapToggle;\r\n    private RadioButton listToggle;\r\n\r\n    private int items_queried;\r\n    private int items_retrieved;\r\n\r\n    private String userFirstName;\r\n\r\n\r\n    String TAG = \"mh\";\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setRetainInstance(true);\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        View returnView = inflater.inflate(R.layout.fragment_offers, container, false);\r\n\r\n\r\n        // GET UI ELEMENTS\r\n\r\n        // welcome message\r\n        welcomeMessage = (TextView)returnView.findViewById(R.id.welcome);\r\n\r\n        // fetch user information to update welcome message\r\n        fetch_user_info_for_welcome(welcomeMessage);\r\n\r\n\r\n        // toggle switch\r\n        mapToggle = (RadioButton)returnView.findViewById(R.id.Maps);\r\n        listToggle = (RadioButton)returnView.findViewById(R.id.offer);\r\n\r\n\r\n        mapToggle.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                listToggle.setSelected(false);\r\n                mapToggle.setSelected(true);\r\n                returnView.findViewById(R.id.list_view).setVisibility(View.GONE);\r\n                returnView.findViewById(R.id.map_view).setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n        listToggle.setOnClickListener(new View.OnClickListener(){\r\n            @Override\r\n            public void onClick(View v) {\r\n                listToggle.setSelected(true);\r\n                mapToggle.setSelected(false);\r\n                returnView.findViewById(R.id.list_view).setVisibility(View.VISIBLE);\r\n                returnView.findViewById(R.id.map_view).setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        welcomeMessage = (TextView)returnView.findViewById(R.id.welcome);\r\n        addJob = (Button) returnView.findViewById(R.id.createJob);\r\n        addJob.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(getActivity(), AddJobActivity.class));\r\n            }\r\n        });\r\n\r\n        // get recycler view\r\n        view = returnView.findViewById(R.id.recycler);\r\n        view.setHasFixedSize(true);\r\n        LinearLayoutManager llm = new LinearLayoutManager(getContext());\r\n        view.setLayoutManager(llm);\r\n        items_queried = 0;\r\n        items_retrieved = 0;\r\n        initJobs();\r\n\r\n        return returnView;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\r\n        //sync the google map fragment\r\n        mapFragment.getMapAsync(this);\r\n\r\n\r\n        geofire_db = FirebaseDatabase.getInstance().getReference().child(\"geofire\");\r\n        geoFire = new GeoFire(geofire_db);\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(getContext());\r\n        createLocationRequest();\r\n\r\n        locationCallback = new LocationCallback() {\r\n            @Override\r\n            public void onLocationResult(LocationResult locationResult) {\r\n                if (locationResult == null) {\r\n                    return;\r\n                }\r\n                for (Location location : locationResult.getLocations()) {\r\n                    initial_location = location;\r\n                    // Update UI with location data\r\n                    // ...\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        startLocationUpdates();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        stopLocationUpdates();\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n\r\n        map = googleMap;\r\n        //check for permission and enable location layer.\r\n        enableMyLocation();\r\n\r\n        clusterManager = new ClusterManager<MapItem>(getContext(), map);\r\n\r\n        // setup on click listeners\r\n        clusterManager.setOnClusterClickListener(this);\r\n        clusterManager.setOnClusterItemClickListener(this);\r\n        clusterManager.setOnClusterItemInfoWindowClickListener(this);\r\n\r\n        MapItemMarkerRender renderer = new MapItemMarkerRender(getContext(), map, clusterManager);\r\n\r\n        map.setOnCameraIdleListener(clusterManager);\r\n        map.setOnMarkerClickListener(clusterManager);\r\n        clusterManager.setRenderer(renderer);\r\n\r\n        fusedLocationClient.getLastLocation()\r\n                .addOnSuccessListener(getActivity(), new OnSuccessListener<Location>() {\r\n                    @Override\r\n                    public void onSuccess(Location location) {\r\n                        // Got last known location. In some rare situations this can be null.\r\n                        if (location != null) {\r\n                            initial_location = location;\r\n                            LatLng latLng = new LatLng(location.getLatitude(),\r\n                                    location.getLongitude());\r\n                            // Logic to handle location object\r\n                            map.animateCamera(CameraUpdateFactory.newLatLngZoom(latLng, 15));\r\n\r\n                            fetch_offers();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    //ListView--------------------------------------------------------------------------------------\r\n    private void initJobs(){\r\n        jobs = new ArrayList<>();\r\n    }\r\n\r\n    private void initializeAdapter(){\r\n        GeneralJobCardAdapter adapter = new GeneralJobCardAdapter(jobs);\r\n        view.setAdapter(adapter);\r\n        adapter.setOnItemClickListener(new GeneralJobCardAdapter.OnItemClickListener()\r\n        {\r\n            @Override\r\n            public void onMoreDetailsClick(int position) {\r\n                Intent intent = new Intent(getActivity(), JobDetailsActivity.class);\r\n                intent.putExtra(JOB_TAG, AVALIABLE_JOB_KEY);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //Database--------------------------------------------------------------------------------------\r\n    public static void fetch_user_info_for_welcome(TextView toSetWelcome){\r\n        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n        DatabaseReference users_ref = FirebaseDatabase.getInstance().getReference(\"users\");\r\n        Query userQuery = users_ref.child(userId);\r\n        userQuery.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n                User user = dataSnapshot.getValue(User.class);\r\n                if (user != null) {\r\n                    // get ui element for welcome message and populate with user info\r\n                    toSetWelcome.setText(\"Hello, \" + user.firstName);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    //fetch offers around default radius of user from firebase\r\n    public void fetch_offers(){\r\n        GeoQuery geoQuery = geoFire.queryAtLocation(new GeoLocation(initial_location.getLatitude(), initial_location.getLongitude()), 3);\r\n        geoQuery.addGeoQueryEventListener(new GeoQueryEventListener() {\r\n            @Override\r\n            public void onKeyEntered(String key, GeoLocation location) {\r\n                if(getContext() != null){\r\n                    items_queried++;\r\n\r\n                    DatabaseReference offers_ref = FirebaseDatabase.getInstance().getReference(\"offers\");\r\n                    Query offersQuery = offers_ref.child(key);\r\n                    offersQuery.addValueEventListener(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(DataSnapshot dataSnapshot) {\r\n                            items_retrieved++;\r\n                            Job job = dataSnapshot.getValue(Job.class);\r\n                            if(job != null){\r\n                                jobs.add(job);\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(DatabaseError databaseError) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onKeyExited(String key) {\r\n                Log.d(TAG, String.format(\"Key %s is no longer in the search area\", key));\r\n            }\r\n\r\n            @Override\r\n            public void onKeyMoved(String key, GeoLocation location) {\r\n                Log.d(TAG, String.format(\"Key %s moved within the search area to [%f,%f]\", key, location.latitude, location.longitude));\r\n            }\r\n\r\n            @Override\r\n            public void onGeoQueryReady() {\r\n\r\n                //once the data has been queried, check if the loaded data count equals the\r\n                //queried data. If not, wait until all data is loaded then initializeAdapter\r\n\r\n                if(items_queried == items_retrieved){\r\n                    //populate list\r\n                    initializeAdapter();\r\n                    \r\n                    //populate map\r\n                    populate_map();\r\n                }else{\r\n                    new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            onGeoQueryReady();\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onGeoQueryError(DatabaseError error) {\r\n                Log.d(TAG, \"There was an error with this query: \" + error);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    // cluster methods \r\n    @Override\r\n    public boolean onClusterClick(Cluster<MapItem> cluster) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean onClusterItemClick(MapItem item) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void onClusterItemInfoWindowClick(MapItem item) {\r\n\r\n    }\r\n\r\n    // customize clusterer\r\n    public class MapItemMarkerRender extends DefaultClusterRenderer<MapItem> {\r\n\r\n        private final Context mContext;\r\n\r\n        public MapItemMarkerRender(Context context, GoogleMap map, ClusterManager<MapItem> clusterManager) {\r\n            super(context, map, clusterManager);\r\n            mContext = context;\r\n        }\r\n\r\n        @Override\r\n        protected void onBeforeClusterItemRendered(MapItem item, MarkerOptions markerOptions) {\r\n\r\n        }\r\n        @Override\r\n        protected void onBeforeClusterRendered(Cluster<MapItem> cluster, MarkerOptions markerOptions) {\r\n\r\n        }\r\n\r\n        @Override\r\n        protected boolean shouldRenderAsCluster(Cluster<MapItem> cluster){\r\n            // cluster if there is more than one marker at one postion\r\n            return cluster.getSize() > 1;\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    \r\n    public void populate_map(){\r\n        Log.d(TAG, \"populate_map: \");\r\n        for(int i = 0; i<jobs.size(); i++){\r\n            //            LatLng job_location = getLocationFromAddress(jobs.get(i).address);\r\n            //            Marker marker = map.addMarker(\r\n            //                    new MarkerOptions()\r\n            //                            .position(job_location)\r\n            //                            .title(jobs.get(i).type)\r\n            //                            .snippet(\"$\"+jobs.get(i).hourlyPay));\r\n            //            marker.showInfoWindow();\r\n\r\n            LatLng job_location = getLocationFromAddress(jobs.get(i).address);\r\n            double lat = job_location.latitude;\r\n            double lng = job_location.longitude;\r\n            MapItem newItem = new MapItem(lat, lng, jobs.get(i).type, \"$\"+jobs.get(i).hourlyPay);\r\n            clusterManager.addItem(newItem);\r\n\r\n\r\n            // todo: cluster items?\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    // to help with map clustering for markers\r\n    public class MapItem implements ClusterItem {\r\n        private double latitude;\r\n        private double longitude;\r\n\r\n        private final LatLng position;\r\n        private final String title;\r\n        private final String snippet;\r\n\r\n        public MapItem(double lat, double lng, String title, String snippet) {\r\n            latitude = lat;\r\n            longitude = lng;\r\n            position = new LatLng(lat, lng);\r\n            this.title = title;\r\n            this.snippet = snippet;\r\n        }\r\n\r\n        @Override\r\n        public LatLng getPosition() {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public String getTitle() {\r\n            return title;\r\n        }\r\n\r\n        @Override\r\n        public String getSnippet() {\r\n            return snippet;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public LatLng getLocationFromAddress(String address){\r\n        try {\r\n            Geocoder selected_place_geocoder = new Geocoder(getActivity());\r\n            List<Address> addresses;\r\n\r\n            addresses = selected_place_geocoder.getFromLocationName(address, 1);\r\n\r\n            if (addresses == null) {\r\n                return null;\r\n            } else {\r\n                Address location = addresses.get(0);\r\n                LatLng job_location = new LatLng(location.getLatitude(), location.getLongitude());\r\n                return job_location;\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    //location functions----------------------------------------------------------------------------\r\n\r\n    protected void createLocationRequest() {\r\n        locationRequest = LocationRequest.create();\r\n        //update location every 10 sec\r\n        locationRequest.setInterval(10000);\r\n        //get as accurate as possible location (enable the use of gps)\r\n        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    private void startLocationUpdates() {\r\n\r\n        fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, Looper.getMainLooper());\r\n    }\r\n\r\n    private void stopLocationUpdates() {\r\n        fusedLocationClient.removeLocationUpdates(locationCallback);\r\n    }\r\n\r\n\r\n    //Permession------------------------------------------------------------------------------------\r\n\r\n    //Check if location permissions are granted.Enables the My Location layer if the fine location\r\n    //permission has been granted. Else, ask for permission.\r\n    private void enableMyLocation() {\r\n        if (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION)\r\n                == PackageManager.PERMISSION_GRANTED) {\r\n            if (map != null) {\r\n                map.setMyLocationEnabled(true);\r\n            }\r\n        } else {\r\n//            // Display a dialog with rationale and ask for permission\r\n            AlertDialog dialog = new AlertDialog.Builder(getActivity())\r\n                    .setMessage(R.string.permission_rationale_location)\r\n                    .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            // After click on Ok, request the permission.\r\n                            // Permission to access the location is missing. Show rationale and request permission\r\n                            requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);\r\n                        }\r\n                    })\r\n                    .setNegativeButton(android.R.string.cancel, null)\r\n                    .show();\r\n\r\n        }\r\n    }\r\n\r\n    //handle the result of requestPermission() called in enablemyLocation()\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n        Log.d(\"mh\", \"onRequestPermissionsResult: \");\r\n        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED){\r\n                // Enable the my location layer if the permission has been granted.\r\n                enableMyLocation();\r\n\r\n            } else {\r\n                // Permission was denied. Display an error message\r\n                // Display the missing permission error dialog when the fragments resume.\r\n                PermissionUtils.PermissionDeniedDialog\r\n                        .newInstance(true).show(getChildFragmentManager(), \"dialog\");\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/majd_hamdan/com/easyjob/ui/OffersFragment.java	(revision df4e12959a428e0bdfed0364f3063ffff9a2a480)
+++ app/src/main/java/majd_hamdan/com/easyjob/ui/OffersFragment.java	(date 1615417909765)
@@ -46,6 +46,7 @@
 import com.google.android.gms.maps.SupportMapFragment;
 import com.google.android.gms.maps.model.BitmapDescriptorFactory;
 import com.google.android.gms.maps.model.LatLng;
+import com.google.android.gms.maps.model.LatLngBounds;
 import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;
 import com.google.android.gms.tasks.OnSuccessListener;
@@ -62,6 +63,7 @@
 import com.google.maps.android.clustering.view.DefaultClusterRenderer;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 
 import majd_hamdan.com.easyjob.R;
@@ -375,7 +377,24 @@
     // cluster methods 
     @Override
     public boolean onClusterClick(Cluster<MapItem> cluster) {
-        return false;
+        // build the lat and lng point in the cluster
+
+        LatLngBounds.Builder builder = LatLngBounds.builder();
+        Collection<MapItem> venueMarkers = cluster.getItems();
+
+        for (ClusterItem item : venueMarkers) {
+            LatLng venuePosition = item.getPosition();
+            builder.include(venuePosition);
+        }
+
+        final LatLngBounds bounds = builder.build();
+
+        try { map.animateCamera(CameraUpdateFactory.newLatLngBounds(bounds, 100));
+        } catch (Exception error) {
+
+        }
+
+        return true;
     }
 
     @Override
@@ -385,7 +404,7 @@
 
     @Override
     public void onClusterItemInfoWindowClick(MapItem item) {
-
+        // todo: implement
     }
 
     // customize clusterer
